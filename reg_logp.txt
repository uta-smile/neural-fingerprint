Loading data...
Task params {'target_name': 'logp', 'data_file': 'data/logp.csv'}

Starting Morgan fingerprint experiment...
Starting neural fingerprint experiment...
Total number of weights in the network: 103221
max of weights 0.08886963478129936
Iteration 0 loss 0.8858571234305829 train RMSE 1.5100743187049508 Validation RMSE 0 : 1.7056960659028504 max of weights 0.09753541722779613
Iteration 10 loss 0.8693541805580776 train RMSE 1.4819669927692607 Validation RMSE 10 : 1.6849147781024616 max of weights 0.10099797019349516
Iteration 20 loss 0.8544884601065212 train RMSE 1.4566059725987264 Validation RMSE 20 : 1.6606611318109477 max of weights 0.11468796241653355
Iteration 30 loss 0.8569608432196836 train RMSE 1.4607286214697441 Validation RMSE 30 : 1.6616309393791926 max of weights 0.14089966968198941
Iteration 40 loss 0.852334744991212 train RMSE 1.4526657767358937 Validation RMSE 40 : 1.6306180235183296 max of weights 0.17359566121089215
Iteration 50 loss 0.8094579042526329 train RMSE 1.3791981743783643 Validation RMSE 50 : 1.5505435806902699 max of weights 0.21310607154322753
Iteration 60 loss 0.7007037861335872 train RMSE 1.1932752906586797 Validation RMSE 60 : 1.345098237067199[01:44:36] Explicit valence for atom # 9 N, 4, is greater than permitted

Traceback (most recent call last):
  File "regression_logp.py", line 152, in <module>
    main()
  File "regression_logp.py", line 145, in main
    test_loss_neural = run_conv_experiment()
  File "regression_logp.py", line 136, in run_conv_experiment
    train_params, validation_smiles=val_inputs, validation_raw_targets=val_targets)
  File "regression_logp.py", line 85, in train_nn
    step_size=train_params['step_size'])
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/optimizers.py", line 33, in adam
    g = grad(x, i)
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/util.py", line 137, in batched_grad
    return grad(weights, inputs[cur_idxs], targets[cur_idxs])
  File "/home/shengwang/anaconda3/envs/py27/lib/python2.7/site-packages/autograd/wrap_util.py", line 20, in nary_f
    return unary_operator(unary_f, x, *nary_op_args, **nary_op_kwargs)
  File "/home/shengwang/anaconda3/envs/py27/lib/python2.7/site-packages/autograd/differential_operators.py", line 24, in grad
    vjp, ans = _make_vjp(fun, x)
  File "/home/shengwang/anaconda3/envs/py27/lib/python2.7/site-packages/autograd/core.py", line 10, in make_vjp
    end_value, end_node =  trace(start_node, fun, x)
  File "/home/shengwang/anaconda3/envs/py27/lib/python2.7/site-packages/autograd/tracer.py", line 10, in trace
    end_box = fun(start_box)
  File "/home/shengwang/anaconda3/envs/py27/lib/python2.7/site-packages/autograd/wrap_util.py", line 15, in unary_f
    return fun(*subargs, **kwargs)
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/build_vanilla_net.py", line 79, in loss_fun
    fingerprints = fingerprint_func(fingerprint_weights, smiles)
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/build_convnet.py", line 99, in output_layer_fun
    output, _, _ = output_layer_fun_and_atom_activations(weights, smiles)
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/build_convnet.py", line 75, in output_layer_fun_and_atom_activations
    array_rep = array_rep_from_smiles(tuple(smiles))
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/util.py", line 60, in __call__
    result = self.func(*args)
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/build_convnet.py", line 114, in array_rep_from_smiles
    molgraph = graph_from_smiles_tuple(smiles)
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/mol_graph.py", line 66, in graph_from_smiles_tuple
    graph_list = [graph_from_smiles(s) for s in smiles_tuple]
  File "/home/shengwang/fastnn-link/neural-fingerprint/neuralfingerprint/mol_graph.py", line 80, in graph_from_smiles
    raise ValueError("Could not parse SMILES string:", smiles)
ValueError: ('Could not parse SMILES string:', 'CC1(C)CC(CC(C)(C)[N]1=O)N(CCN(C2CC(C)(C)[N](=O)C(C)(C)C2)C(=O)N(CCCl)N=O)C(=O)N(CCCl)N=O')
